package bufio // import "bufio"

Package bufio implements buffered I/O. It wraps an io.Reader or io.Writer
object, creating another object (Reader or Writer) that also implements the
interface but provides buffering and some help for textual I/O.

const MaxScanTokenSize = 64 * 1024 ...
var ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte") ...
var ErrTooLong = errors.New("bufio.Scanner: token too long") ...
var ErrFinalToken = errors.New("final token")
func ScanBytes(data []byte, atEOF bool) (advance int, token []byte, err error)
func ScanLines(data []byte, atEOF bool) (advance int, token []byte, err error)
func ScanRunes(data []byte, atEOF bool) (advance int, token []byte, err error)
func ScanWords(data []byte, atEOF bool) (advance int, token []byte, err error)
type ReadWriter struct{ ... }
    func NewReadWriter(r *Reader, w *Writer) *ReadWriter
type Reader struct{ ... }
    func NewReader(rd io.Reader) *Reader
    func NewReaderSize(rd io.Reader, size int) *Reader
type Scanner struct{ ... }
    func NewScanner(r io.Reader) *Scanner
type SplitFunc func(data []byte, atEOF bool) (advance int, token []byte, err error)
type Writer struct{ ... }
    func NewWriter(w io.Writer) *Writer
    func NewWriterSize(w io.Writer, size int) *Writer
